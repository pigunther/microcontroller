
My_led_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f4  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000648  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000501  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000060ee  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021f  00000000  00000000  0000766a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00007889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002c4  00000000  00000000  000078c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	67 c0       	rjmp	.+206    	; 0x132 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
	SendByteHorizontal(vert);
}


int main (){
	DDRD=0xff; // инициализация порта C - настроили на выход все выходы.
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	81 bb       	out	0x11, r24	; 17
  6a:	88 e0       	ldi	r24, 0x08	; 8
  6c:	90 e0       	ldi	r25, 0x00	; 0
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
	while (mask){
		PORTD &= (~(1<<PIND3));  //PIND3 = 0 - чтобы начать записывать число на сдвиговый счетчик 
  6e:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte)
			PORTD |=(1<<PIND1);       // PIND1 = 1
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
  70:	91 98       	cbi	0x12, 1	; 18
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
  72:	93 9a       	sbi	0x12, 3	; 18
  74:	01 97       	sbiw	r24, 0x01	; 1
	PORTD  |= (1<<PIND2);
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
	while (mask){
  76:	d9 f7       	brne	.-10     	; 0x6e <main+0x8>
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
		mask>>=1;
	}
	PORTD  &= (~(1<<PIND4));
  78:	94 98       	cbi	0x12, 4	; 18
	PORTD  |= (1<<PIND4);
  7a:	94 9a       	sbi	0x12, 4	; 18
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	90 e0       	ldi	r25, 0x00	; 0


void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
		PORTD &= (~(1<<PIND3));  //PIND3 = 0 - чтобы начать записывать число на сдвиговый счетчик
  80:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte)
			PORTD |=(1<<PIND1);       // PIND1 = 1
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
  82:	91 98       	cbi	0x12, 1	; 18
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
  84:	93 9a       	sbi	0x12, 3	; 18
  86:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/io.h>


void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
  88:	d9 f7       	brne	.-10     	; 0x80 <main+0x1a>
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
		mask<<=1;
	}
	PORTD  &= (~(1<<PIND2)); //Состояние PD2 устанавливаем в лог.«0»
  8a:	92 98       	cbi	0x12, 2	; 18
	PORTD  |= (1<<PIND2);
  8c:	92 9a       	sbi	0x12, 2	; 18

	//OutOn();
	SendByteVertical(0);
	SendByteHorizontal(0);
	//_delay_ms(1000);
	int k = 1;
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	70 e0       	ldi	r23, 0x00	; 0

 	while (1) {
		 if (k > 8)
			k = 1;
  92:	c1 e0       	ldi	r28, 0x01	; 1
  94:	b0 e0       	ldi	r27, 0x00	; 0
	PORTD |= (1<<PIND6);   // Состояние PD6 в 1
}

void inline TurnCertainDiod(int v, int h) {
	uint8_t vert, one;
	vert = 0b10000000;
  96:	50 e8       	ldi	r21, 0x80	; 128
	
	while (v > 1) {
		vert >>= 1;
		v--;
	}
	SendByteVertical(one - vert);
  98:	f8 e0       	ldi	r31, 0x08	; 8
  9a:	e0 e0       	ldi	r30, 0x00	; 0
	vert = 0b10000000;
	while (h > 1) {
  9c:	a1 e0       	ldi	r26, 0x01	; 1
	SendByteHorizontal(0);
	//_delay_ms(1000);
	int k = 1;

 	while (1) {
		 if (k > 8)
  9e:	69 30       	cpi	r22, 0x09	; 9
  a0:	71 05       	cpc	r23, r1
  a2:	5c f4       	brge	.+22     	; 0xba <main+0x54>
void inline TurnCertainDiod(int v, int h) {
	uint8_t vert, one;
	vert = 0b10000000;
	one = 0b111111111;
	
	while (v > 1) {
  a4:	62 30       	cpi	r22, 0x02	; 2
  a6:	71 05       	cpc	r23, r1
  a8:	64 f0       	brlt	.+24     	; 0xc2 <main+0x5c>
  aa:	cb 01       	movw	r24, r22
  ac:	25 2f       	mov	r18, r21
		vert >>= 1;
  ae:	26 95       	lsr	r18
		v--;
  b0:	01 97       	sbiw	r24, 0x01	; 1
void inline TurnCertainDiod(int v, int h) {
	uint8_t vert, one;
	vert = 0b10000000;
	one = 0b111111111;
	
	while (v > 1) {
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	91 05       	cpc	r25, r1
  b6:	d9 f7       	brne	.-10     	; 0xae <main+0x48>
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <main+0x5e>
	//_delay_ms(1000);
	int k = 1;

 	while (1) {
		 if (k > 8)
			k = 1;
  ba:	6c 2f       	mov	r22, r28
  bc:	7b 2f       	mov	r23, r27
	PORTD |= (1<<PIND6);   // Состояние PD6 в 1
}

void inline TurnCertainDiod(int v, int h) {
	uint8_t vert, one;
	vert = 0b10000000;
  be:	25 2f       	mov	r18, r21
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x5e>
  c2:	25 2f       	mov	r18, r21
	
	while (v > 1) {
		vert >>= 1;
		v--;
	}
	SendByteVertical(one - vert);
  c4:	20 95       	com	r18
  c6:	8f 2f       	mov	r24, r31
  c8:	9e 2f       	mov	r25, r30
	PORTD  &= (~(1<<PIND2)); //Состояние PD2 устанавливаем в лог.«0»
	PORTD  |= (1<<PIND2);
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
  ca:	35 2f       	mov	r19, r21
	while (mask){
		PORTD &= (~(1<<PIND3));  //PIND3 = 0 - чтобы начать записывать число на сдвиговый счетчик 
  cc:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte)
  ce:	43 2f       	mov	r20, r19
  d0:	42 23       	and	r20, r18
  d2:	11 f0       	breq	.+4      	; 0xd8 <main+0x72>
			PORTD |=(1<<PIND1);       // PIND1 = 1
  d4:	91 9a       	sbi	0x12, 1	; 18
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x74>
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
  d8:	91 98       	cbi	0x12, 1	; 18
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
  da:	93 9a       	sbi	0x12, 3	; 18
		mask>>=1;
  dc:	36 95       	lsr	r19
  de:	01 97       	sbiw	r24, 0x01	; 1
	PORTD  |= (1<<PIND2);
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
	while (mask){
  e0:	a9 f7       	brne	.-22     	; 0xcc <main+0x66>
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
		mask>>=1;
	}
	PORTD  &= (~(1<<PIND4));
  e2:	94 98       	cbi	0x12, 4	; 18
	PORTD  |= (1<<PIND4);
  e4:	94 9a       	sbi	0x12, 4	; 18
		vert >>= 1;
		v--;
	}
	SendByteVertical(one - vert);
	vert = 0b10000000;
	while (h > 1) {
  e6:	62 30       	cpi	r22, 0x02	; 2
  e8:	71 05       	cpc	r23, r1
  ea:	f4 f0       	brlt	.+60     	; 0x128 <main+0xc2>
  ec:	cb 01       	movw	r24, r22
  ee:	35 2f       	mov	r19, r21
		vert >>= 1;
  f0:	36 95       	lsr	r19
		h--;
  f2:	01 97       	sbiw	r24, 0x01	; 1
		vert >>= 1;
		v--;
	}
	SendByteVertical(one - vert);
	vert = 0b10000000;
	while (h > 1) {
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x8a>
  fa:	17 c0       	rjmp	.+46     	; 0x12a <main+0xc4>


void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
		PORTD &= (~(1<<PIND3));  //PIND3 = 0 - чтобы начать записывать число на сдвиговый счетчик
  fc:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte)
  fe:	42 2f       	mov	r20, r18
 100:	43 23       	and	r20, r19
 102:	11 f0       	breq	.+4      	; 0x108 <main+0xa2>
			PORTD |=(1<<PIND1);       // PIND1 = 1
 104:	91 9a       	sbi	0x12, 1	; 18
 106:	01 c0       	rjmp	.+2      	; 0x10a <main+0xa4>
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
 108:	91 98       	cbi	0x12, 1	; 18
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
 10a:	93 9a       	sbi	0x12, 3	; 18
		mask<<=1;
 10c:	22 0f       	add	r18, r18
 10e:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/io.h>


void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
 110:	a9 f7       	brne	.-22     	; 0xfc <main+0x96>
		else 
			PORTD &= (~(1<<PIND1));   //PIND1 = 0
		PORTD  |= (1<<PIND3);   //PIND3 = 1 - сдвигаем
		mask<<=1;
	}
	PORTD  &= (~(1<<PIND2)); //Состояние PD2 устанавливаем в лог.«0»
 112:	92 98       	cbi	0x12, 2	; 18
	PORTD  |= (1<<PIND2);
 114:	92 9a       	sbi	0x12, 2	; 18

 	while (1) {
		 if (k > 8)
			k = 1;
		TurnCertainDiod(k, k);
		k++;
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	87 e9       	ldi	r24, 0x97	; 151
 11c:	9a e3       	ldi	r25, 0x3A	; 58
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0xb8>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xbe>
 124:	00 00       	nop
 126:	bb cf       	rjmp	.-138    	; 0x9e <main+0x38>
	while (v > 1) {
		vert >>= 1;
		v--;
	}
	SendByteVertical(one - vert);
	vert = 0b10000000;
 128:	35 2f       	mov	r19, r21
	while (h > 1) {
 12a:	8f 2f       	mov	r24, r31
 12c:	9e 2f       	mov	r25, r30
 12e:	2a 2f       	mov	r18, r26
 130:	e5 cf       	rjmp	.-54     	; 0xfc <main+0x96>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
