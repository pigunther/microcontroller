
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000426  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000609c  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  000072e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000736e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  0000737e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	29 c0       	rjmp	.+82     	; 0xb6 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
int main (void) {
	//Insert system clock initialization code here (sysclk_init()). 
	//board_init();
	//Insert application code here, after the board has been initialized. 
	
	DDRC  = 0b11111111;          // инициализация порта C - настроили на выход первые два выхода.
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;          // лог "0" на всех выходах C
  6a:	15 ba       	out	0x15, r1	; 21
	DDRD  = 0b00000000;  //Настраиваем все разряды порта D на режим "Вход"
  6c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111111;  //Устанавливаем все разряды порта D в лог.«1» (На выходе порта напряжение равное Vcc)
  6e:	82 bb       	out	0x12, r24	; 18
	int I = 123;
  70:	8b e7       	ldi	r24, 0x7B	; 123
  72:	90 e0       	ldi	r25, 0x00	; 0
			}
			//PORTC |= (1 << PC0);     //Состояние PC0 устанавливаем в лог.«1»
		} else {
			_delay_ms(50);
			if ((PIND & (1 << PD0)) == 1)
				PORTC = 0b00000010;
  74:	22 e0       	ldi	r18, 0x02	; 2
			I++;
			I++;
			I++;
			if (I % 2 == 0) {
				if ((PIND & (1 << PD0)) == 0)
					PORTC = 0b00000001;
  76:	31 e0       	ldi	r19, 0x01	; 1
		//LED off
		PORTC = 0b00000010;     // PC0 = 0 = GND
		_delay_ms(500);         // задержка 500мс
		*/
		//Проверяем: если состояние PD0 лог.«0» то кнопка нажата
		if ((PIND & (1 << PD0)) == 0) {
  78:	80 99       	sbic	0x10, 0	; 16
  7a:	10 c0       	rjmp	.+32     	; 0x9c <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	4f e7       	ldi	r20, 0x7F	; 127
  7e:	58 e3       	ldi	r21, 0x38	; 56
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	41 50       	subi	r20, 0x01	; 1
  84:	50 40       	sbci	r21, 0x00	; 0
  86:	60 40       	sbci	r22, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x1c>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x26>
  8c:	00 00       	nop
			I++;
			I++;
			I++;
			I++;
			I++;
			I++;
  8e:	07 96       	adiw	r24, 0x07	; 7
			if (I % 2 == 0) {
  90:	80 fd       	sbrc	r24, 0
  92:	f2 cf       	rjmp	.-28     	; 0x78 <main+0x12>
				if ((PIND & (1 << PD0)) == 0)
  94:	80 99       	sbic	0x10, 0	; 16
  96:	f0 cf       	rjmp	.-32     	; 0x78 <main+0x12>
					PORTC = 0b00000001;
  98:	35 bb       	out	0x15, r19	; 21
  9a:	ee cf       	rjmp	.-36     	; 0x78 <main+0x12>
  9c:	4f e7       	ldi	r20, 0x7F	; 127
  9e:	58 e3       	ldi	r21, 0x38	; 56
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	41 50       	subi	r20, 0x01	; 1
  a4:	50 40       	sbci	r21, 0x00	; 0
  a6:	60 40       	sbci	r22, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x3c>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x46>
  ac:	00 00       	nop
			}
			//PORTC |= (1 << PC0);     //Состояние PC0 устанавливаем в лог.«1»
		} else {
			_delay_ms(50);
			if ((PIND & (1 << PD0)) == 1)
  ae:	80 9b       	sbis	0x10, 0	; 16
  b0:	e3 cf       	rjmp	.-58     	; 0x78 <main+0x12>
				PORTC = 0b00000010;
  b2:	25 bb       	out	0x15, r18	; 21
  b4:	e1 cf       	rjmp	.-62     	; 0x78 <main+0x12>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
