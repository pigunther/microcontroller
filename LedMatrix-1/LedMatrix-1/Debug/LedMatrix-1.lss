
LedMatrix-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086f  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000650  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000569  00000000  00000000  000011d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000060f0  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ce  00000000  00000000  00007854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00007a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002ca  00000000  00000000  00007a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	02 d0       	rcall	.+4      	; 0x7c <main>
  78:	83 c0       	rjmp	.+262    	; 0x180 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <main>:
	254,  0, 12, 15,  0, 15, 12,  0,  0,   255
};


int main (){
	DDRD=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	81 bb       	out	0x11, r24	; 17
	PORTD  |= (1<<PIND4);


}
void inline OutOn(){
	PORTD &=(~(1<<PIND6));
  80:	96 98       	cbi	0x12, 6	; 18
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	90 e0       	ldi	r25, 0x00	; 0
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
	while (mask){
		PORTD &= (~(1<<PIND3));
  86:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte){
			PORTD |=(1<<PIND1);
		}
		else {
			PORTD &= (~(1<<PIND1));
  88:	91 98       	cbi	0x12, 1	; 18
		}
		PORTD  |= (1<<PIND3);
  8a:	93 9a       	sbi	0x12, 3	; 18
  8c:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
	while (mask){
  8e:	d9 f7       	brne	.-10     	; 0x86 <main+0xa>
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	90 e0       	ldi	r25, 0x00	; 0
// Show slowly how frame is drawn
//#define DEMO
void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
		PORTD &= (~(1<<PIND3));
  94:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte){
			PORTD |=(1<<PIND1);
		}
		else {
			PORTD &= (~(1<<PIND1));
  96:	91 98       	cbi	0x12, 1	; 18
		}
		PORTD  |= (1<<PIND3);
  98:	93 9a       	sbi	0x12, 3	; 18
  9a:	01 97       	sbiw	r24, 0x01	; 1

// Show slowly how frame is drawn
//#define DEMO
void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
  9c:	d9 f7       	brne	.-10     	; 0x94 <main+0x18>
void  inline OutHoriz(){
	PORTD  &= (~(1<<PIND2));
	PORTD  |= (1<<PIND2);
}
void inline OutVert(){
	PORTD  &= (~(1<<PIND4));
  9e:	94 98       	cbi	0x12, 4	; 18
	PORTD  |= (1<<PIND4);
  a0:	94 9a       	sbi	0x12, 4	; 18
		mask>>=1;
	}
}

void  inline OutHoriz(){
	PORTD  &= (~(1<<PIND2));
  a2:	92 98       	cbi	0x12, 2	; 18
	PORTD  |= (1<<PIND2);
  a4:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	8e e9       	ldi	r24, 0x9E	; 158
  aa:	94 e2       	ldi	r25, 0x24	; 36
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x30>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x3a>
  b6:	00 00       	nop


int main (){
	DDRD=0xff;
	uint8_t b=0b11001101;
	uint8_t c=0;
  b8:	b1 2c       	mov	r11, r1
};


int main (){
	DDRD=0xff;
	uint8_t b=0b11001101;
  ba:	5d ec       	ldi	r21, 0xCD	; 205

 	while (1) {
		// simple frame change animation (maybe used as double buffer in the future)
		if(ANIMATE & 2){
			if(c>100) p=sd1;
			else p=sd2;
  bc:	a0 e6       	ldi	r26, 0x60	; 96
  be:	b0 e0       	ldi	r27, 0x00	; 0
		
		// main output loop
		t=*p;
		l=0;
		k=1;
		while(t!=255){
  c0:	a1 2c       	mov	r10, r1
  c2:	88 24       	eor	r8, r8
  c4:	83 94       	inc	r8
  c6:	91 2c       	mov	r9, r1
			if(t==254){	
				if(l)k<<=1;
				p++;
				t=*p;
				l++;
				b=0b10000000;
  c8:	08 e0       	ldi	r16, 0x08	; 8
  ca:	10 e0       	ldi	r17, 0x00	; 0
#define ANIMATE 2

// Show slowly how frame is drawn
//#define DEMO
void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
  cc:	ee 24       	eor	r14, r14
  ce:	e3 94       	inc	r14
			t&=0b00001111;
			/*#ifdef DEMO
			for(i=0;i<10000;i++){
			#endif
			*/
			for(r=0;r<15;r++){
  d0:	fa 2c       	mov	r15, r10
		mask<<=1;
	}
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
  d2:	68 94       	set
  d4:	cc 24       	eor	r12, r12
  d6:	c7 f8       	bld	r12, 7


 	while (1) {
		// simple frame change animation (maybe used as double buffer in the future)
		if(ANIMATE & 2){
			if(c>100) p=sd1;
  d8:	e4 e6       	ldi	r30, 0x64	; 100
  da:	eb 15       	cp	r30, r11
  dc:	28 f4       	brcc	.+10     	; 0xe8 <main+0x6c>
  de:	e9 ea       	ldi	r30, 0xA9	; 169
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	40 81       	ld	r20, Z
  e4:	ef 01       	movw	r28, r30
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x70>
			else p=sd2;
  e8:	4c 91       	ld	r20, X
  ea:	ed 01       	movw	r28, r26
		
		// main output loop
		t=*p;
		l=0;
		k=1;
		while(t!=255){
  ec:	4f 3f       	cpi	r20, 0xFF	; 255
  ee:	09 f4       	brne	.+2      	; 0xf2 <main+0x76>
  f0:	45 c0       	rjmp	.+138    	; 0x17c <main+0x100>
  f2:	da 2c       	mov	r13, r10
  f4:	68 2d       	mov	r22, r8
  f6:	79 2d       	mov	r23, r9
}
void inline OutOn(){
	PORTD &=(~(1<<PIND6));
}
void inline OutOff(){
	PORTD |= (1<<PIND6);
  f8:	96 9a       	sbi	0x12, 6	; 18
		t=*p;
		l=0;
		k=1;
		while(t!=255){
			OutOff();			
			if(t==254){	
  fa:	4e 3f       	cpi	r20, 0xFE	; 254
  fc:	e1 f4       	brne	.+56     	; 0x136 <main+0xba>
				if(l)k<<=1;
  fe:	dd 20       	and	r13, r13
 100:	11 f0       	breq	.+4      	; 0x106 <main+0x8a>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
				p++;
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
				t=*p;
 10a:	49 81       	ldd	r20, Y+1	; 0x01
				l++;
 10c:	d3 94       	inc	r13
				b=0b10000000;
				SendByteVertical(~k);
 10e:	56 2f       	mov	r21, r22
 110:	50 95       	com	r21
 112:	80 2f       	mov	r24, r16
 114:	91 2f       	mov	r25, r17
		mask<<=1;
	}
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
 116:	2c 2d       	mov	r18, r12
	while (mask){
		PORTD &= (~(1<<PIND3));
 118:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte){
 11a:	32 2f       	mov	r19, r18
 11c:	35 23       	and	r19, r21
 11e:	11 f0       	breq	.+4      	; 0x124 <main+0xa8>
			PORTD |=(1<<PIND1);
 120:	91 9a       	sbi	0x12, 1	; 18
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0xaa>
		}
		else {
			PORTD &= (~(1<<PIND1));
 124:	91 98       	cbi	0x12, 1	; 18
		}
		PORTD  |= (1<<PIND3);
 126:	93 9a       	sbi	0x12, 3	; 18
		mask>>=1;
 128:	26 95       	lsr	r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void inline SendByteVertical(uint8_t byte){
	uint8_t mask=0b10000000;
	while (mask){
 12c:	a9 f7       	brne	.-22     	; 0x118 <main+0x9c>
void  inline OutHoriz(){
	PORTD  &= (~(1<<PIND2));
	PORTD  |= (1<<PIND2);
}
void inline OutVert(){
	PORTD  &= (~(1<<PIND4));
 12e:	94 98       	cbi	0x12, 4	; 18
	PORTD  |= (1<<PIND4);
 130:	94 9a       	sbi	0x12, 4	; 18
			if(t==254){	
				if(l)k<<=1;
				p++;
				t=*p;
				l++;
				b=0b10000000;
 132:	5c 2d       	mov	r21, r12
 134:	01 c0       	rjmp	.+2      	; 0x138 <main+0xbc>
 136:	fe 01       	movw	r30, r28
 138:	80 2f       	mov	r24, r16
 13a:	91 2f       	mov	r25, r17
#define ANIMATE 2

// Show slowly how frame is drawn
//#define DEMO
void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
 13c:	2e 2d       	mov	r18, r14
	while (mask){
		PORTD &= (~(1<<PIND3));
 13e:	93 98       	cbi	0x12, 3	; 18
		if (mask & byte){
 140:	32 2f       	mov	r19, r18
 142:	35 23       	and	r19, r21
 144:	11 f0       	breq	.+4      	; 0x14a <main+0xce>
			PORTD |=(1<<PIND1);
 146:	91 9a       	sbi	0x12, 1	; 18
 148:	01 c0       	rjmp	.+2      	; 0x14c <main+0xd0>
		}
		else {
			PORTD &= (~(1<<PIND1));
 14a:	91 98       	cbi	0x12, 1	; 18
		}
		PORTD  |= (1<<PIND3);
 14c:	93 9a       	sbi	0x12, 3	; 18
		mask<<=1;
 14e:	22 0f       	add	r18, r18
 150:	01 97       	sbiw	r24, 0x01	; 1

// Show slowly how frame is drawn
//#define DEMO
void inline SendByteHorizontal(uint8_t byte){
	uint8_t mask=0b00000001;
	while (mask){
 152:	a9 f7       	brne	.-22     	; 0x13e <main+0xc2>
		mask>>=1;
	}
}

void  inline OutHoriz(){
	PORTD  &= (~(1<<PIND2));
 154:	92 98       	cbi	0x12, 2	; 18
	PORTD  |= (1<<PIND2);
 156:	92 9a       	sbi	0x12, 2	; 18
				SendByteVertical(~k);
				OutVert();
			}
			SendByteHorizontal(b);
			OutHoriz();	
			t&=0b00001111;
 158:	94 2f       	mov	r25, r20
 15a:	9f 70       	andi	r25, 0x0F	; 15
			/*#ifdef DEMO
			for(i=0;i<10000;i++){
			#endif
			*/
			for(r=0;r<15;r++){
 15c:	8f 2d       	mov	r24, r15
				if (t>r){
 15e:	89 17       	cp	r24, r25
 160:	10 f4       	brcc	.+4      	; 0x166 <main+0xea>
	PORTD  |= (1<<PIND4);


}
void inline OutOn(){
	PORTD &=(~(1<<PIND6));
 162:	96 98       	cbi	0x12, 6	; 18
 164:	01 c0       	rjmp	.+2      	; 0x168 <main+0xec>
}
void inline OutOff(){
	PORTD |= (1<<PIND6);
 166:	96 9a       	sbi	0x12, 6	; 18
			t&=0b00001111;
			/*#ifdef DEMO
			for(i=0;i<10000;i++){
			#endif
			*/
			for(r=0;r<15;r++){
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	8f 30       	cpi	r24, 0x0F	; 15
 16c:	c1 f7       	brne	.-16     	; 0x15e <main+0xe2>
			}
			/*#ifdef DEMO
			}
			#endif
			*/
			p++;
 16e:	ef 01       	movw	r28, r30
 170:	21 96       	adiw	r28, 0x01	; 1
			t=*p;
 172:	41 81       	ldd	r20, Z+1	; 0x01
			b>>=1;
 174:	56 95       	lsr	r21
		
		// main output loop
		t=*p;
		l=0;
		k=1;
		while(t!=255){
 176:	4f 3f       	cpi	r20, 0xFF	; 255
 178:	09 f0       	breq	.+2      	; 0x17c <main+0x100>
 17a:	be cf       	rjmp	.-132    	; 0xf8 <main+0x7c>
				p++;
				t=*p;
			} 
		}

		c++;
 17c:	b3 94       	inc	r11
		if (ANIMATE==1){
			if (c>20)c=0;
		}
	}
 17e:	ac cf       	rjmp	.-168    	; 0xd8 <main+0x5c>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
