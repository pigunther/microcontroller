
button_interruptions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000014c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005df  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000566  00000000  00000000  000007bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000507  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000e774  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000fa31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000158  00000000  00000000  0000fa49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	38 c0       	rjmp	.+112    	; 0x76 <__vector_1>
   6:	00 00       	nop
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	00 00       	nop
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	00 00       	nop
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	00 00       	nop
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	00 00       	nop
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	00 00       	nop
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	00 00       	nop
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	00 00       	nop
  28:	25 c0       	rjmp	.+74     	; 0x74 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	23 c0       	rjmp	.+70     	; 0x74 <__bad_interrupt>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c0       	rjmp	.+62     	; 0x74 <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c0       	rjmp	.+58     	; 0x74 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	19 c0       	rjmp	.+50     	; 0x74 <__bad_interrupt>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	25 d0       	rcall	.+74     	; 0xbc <main>
  72:	30 c0       	rjmp	.+96     	; 0xd4 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_1>:
#define F_CPU 8000000UL  // 8 MHz тактова€ частота

int i=0x00;

//вызываетс€ при возникновении прерывани€ по фронту int0
ISR(INT0_vect) {
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
	i++;
  84:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  88:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  8c:	01 96       	adiw	r24, 0x01	; 1
	if(i>0xff) {
  8e:	8f 3f       	cpi	r24, 0xFF	; 255
  90:	91 05       	cpc	r25, r1
  92:	09 f0       	breq	.+2      	; 0x96 <__vector_1+0x20>
  94:	2c f4       	brge	.+10     	; 0xa0 <__vector_1+0x2a>

int i=0x00;

//вызываетс€ при возникновении прерывани€ по фронту int0
ISR(INT0_vect) {
	i++;
  96:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__vector_1+0x32>
	if(i>0xff) {
		i=0x00;
  a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	PORTA=i;
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ac:	8b bb       	out	0x1b, r24	; 27
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <main>:


int main (void) {
	 //конфигураци€ портов ввода/вывода
	 DDRA = 0xff;//0xff = 0b11111111  все выводы порта A сконфигурировать как выходы
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a bb       	out	0x1a, r24	; 26
	 DDRD = 0x00;//0x00 = 0b00000000  все выводы порта D сконфигурировать как входы
  c0:	11 ba       	out	0x11, r1	; 17
	 PORTD = 0xff;//включить подт€гивающие резисторы на все выводы порта D
  c2:	82 bb       	out	0x12, r24	; 18
	 //инициализаци€ прерывани€
	 GICR |= 0x40;//0x40 = 0b01000000 разрешить прерывани€ на int0
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8b bf       	out	0x3b, r24	; 59
	 MCUCR |= 0x3;//0x3 = 0b00000011 прерывани€ по фронту int0
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	85 bf       	out	0x35, r24	; 53
	 sei();//разрешить все прерывани€, cli()- запретить
  d0:	78 94       	sei

	 while (1) {

	 }
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x16>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
